# -*- coding: utf-8 -*-
"""Duy-practice 5.7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FA_T7ij6vGc3vgS07GOZoIG0_yNZyw2Y

# ⚡ EXTRACT
"""

import pandas as pd

"""## 1. Enrollies' Data

As enrollies are submitting their request to join the course via Google Forms, we have the Google Sheet that stores data about enrolled students, containing the following columns:

* **enrollee_id:** unique ID of an enrollee
* **full_name:** full name of an enrollee
* **city:** the name of an enrollie's city
* **gender:** gender of an enrollee

The source: https://docs.google.com/spreadsheets/d/1VCkHwBjJGRJ21asd9pxW4_0z2PWuKhbLR3gUHm-p4GI/edit?usp=sharing
"""

google_sheet_id = '1VCkHwBjJGRJ21asd9pxW4_0z2PWuKhbLR3gUHm-p4GI'
url = 'https://docs.google.com/spreadsheets/d/' + google_sheet_id + '/export?format=xlsx'
enrollies_data = pd.read_excel(url, sheet_name='enrollies')
display(enrollies_data.head(5))

"""## 2. Enrollies' education

After enrollment everyone should fill the form about their education level. This form is being digitalized manually. Educational department stores it in the Excel format here:
https://assets.swisscoding.edu.vn/company_course/enrollies_education.xlsx

This table contains the following columns:

* **enrollee_id:** A unique identifier for each enrollee. This integer value uniquely distinguishes each participant in the dataset.

* **enrolled_university:** Indicates the enrollee's university enrollment status. Possible values include no_enrollment, Part time course, and Full time course.

* **education_level:** Represents the highest level of education attained by the enrollee. Examples include Graduate, Masters, etc.

* **major_discipline:** Specifies the primary field of study for the enrollee. Examples include STEM, Business Degree, etc.
"""

url_enrollies_education = 'https://assets.swisscoding.edu.vn/company_course/enrollies_education.xlsx'
!wget $url_enrollies_education
enrollies_education = pd.read_excel('enrollies_education.xlsx')
enrollies_education.head(5)

"""## 3. Enrollies' working experience

Another survey that is being collected manually by educational department is about working experience.

Educational department stores it in the CSV format here: https://assets.swisscoding.edu.vn/company_course/work_experience.csv

This table contains the following columns:

* **enrollee_id:** A unique identifier for each enrollee. This integer value uniquely distinguishes each participant in the dataset.

* **relevent_experience:** Indicates whether the enrollee has relevant work experience related to the field they are currently studying or working in. Possible values include Has relevent experience and No relevent experience.

* **experience:** Represents the number of years of work experience the enrollee has. This can be a specific number or a range (e.g., >20, < 1).

* **company_size:** Specifies the size of the company where the enrollee has worked, based on the number of employees. Examples include 50-99, 100-500, etc.

* **company_type:** Indicates the type of company where the enrollee has worked. Examples include Pvt Ltd, Funded Startup, etc.

* **last_new_job:** Represents the number of years since the enrollee's last job change. Examples include never, >4, 1, etc.
"""

url_working_experience = 'https://assets.swisscoding.edu.vn/company_course/work_experience.csv'
!wget $url_working_experience
working_experience = pd.read_csv('work_experience.csv')
working_experience.head(5)

"""## 4. Training hours

From LMS system's database you can retrieve a number of training hours for each student that they have completed.

Database credentials:

* **Database type:** MySQL
* **Host:** 112.213.86.31
* **Port:** 3360
* **Login:** etl_practice
* **Password:** 550814
* **Database name:** company_course
* **Table name:** training_hours
"""

from sqlalchemy import create_engine
!pip install pymysql
import pymysql

# <driver>://<login>:<password>@<host>:<port>/<database_name>
engine = create_engine('mysql+pymysql://etl_practice:550814@112.213.86.31:3360/company_course')
#load
training_hours = pd.read_sql_table('training_hours', con=engine)
training_hours.head(5)

"""## 5. City development index

Another source that can be usefull is the table of City development index.

The City Development Index (CDI) is a measure designed to capture the level of development in cities. It may be significant for the resulting prediction of student's employment motivation.

It is stored here: https://sca-programming-school.github.io/city_development_index/index.html
"""

city_development_tables = pd.read_html('https://sca-programming-school.github.io/city_development_index/index.html')
city_development_index = city_development_tables[0]
city_development_index.head(5)

"""## 6. Employment

From LMS database you can also retrieve the fact of employment. If student is marked as employed, it means that this student started to work in our company after finishing the course.

Database credentials:

* **Database type:** MySQL
* **Host:** 112.213.86.31
* **Port:** 3360
* **Login:** etl_practice
* **Password:** 550814
* **Database name:** company_course
* **Table name:** employment
"""

# <driver>://<login>:<password>@<host>:<port>/<database_name>
# engine = create_engine('mysql+pymysql://etl_practice:550814@112.213.86.31:3360/company_course')
# -> same database as 4. Trainning hours so no new engine created
employment = pd.read_sql_table('employment', con=engine)
employment.head(5)

"""# ⭐ TRANSFORM

## 1. Enrollies data
"""

# Enrollies data
enrollies_data.head()
# Fixing data types
## full_name -> String
enrollies_data['full_name'] = enrollies_data['full_name'].astype('string')
## city -> String
enrollies_data['city'] = enrollies_data['city'].astype('string')
# Missing data handling
enrollies_data['gender'] = enrollies_data['gender'].fillna(enrollies_data['gender'].mode()[0])
enrollies_data['gender'] = enrollies_data['gender'].astype('category')
enrollies_data.info()

# Handling duplicate
## Check duplicate
enrollies_data.duplicated().sum()

# Consistency
print(enrollies_data['gender'].unique())

"""## 2. Enrollies education"""

display(enrollies_education.info())
enrollies_education.head()

# Fill missing value ( missing value is pretty big -> fill Unknown)
enrollies_education['enrolled_university'] = enrollies_education['enrolled_university'].fillna('Unknown')
enrollies_education['education_level'] = enrollies_education['education_level'].fillna('Unknown')
enrollies_education['major_discipline'] = enrollies_education['major_discipline'].fillna('Unknown')

cat_cols = ['enrolled_university', 'education_level', 'major_discipline']

enrollies_education[cat_cols] = enrollies_education[cat_cols].astype('category')
enrollies_education.info()

"""## 3.  Enrollies' working experience"""

display(working_experience.head())
working_experience.info()

working_experience['experience'] = working_experience['experience'].fillna(working_experience['experience'].mode()[0])
working_experience['company_size'] = working_experience['company_size'].fillna('Unknown')
working_experience['company_type'] = working_experience['company_type'].fillna('Unknown')
working_experience['last_new_job'] = working_experience['last_new_job'].fillna('Unknown')

# fixing data types
cal_cols2 = ['relevent_experience','experience', 'company_size', 'company_type', 'last_new_job']
working_experience[cal_cols2] = working_experience[cal_cols2].astype('category')
working_experience.info()

"""## 4. Training hours"""

display(training_hours.head())
training_hours.info()

"""## 5. City development index"""

display(city_development_index.head())
city_development_index.info()

"""## 6. Employment"""

display(employment.head())
employment.info()

"""# ✨ Load"""

db = 'data_warehouse.db'

target_db_engine = create_engine('sqlite:///data_warehouse.db')

employment.to_sql('Fact_employment', target_db_engine, if_exists='replace', index=False)
city_development_index.to_sql('Dim_city_development_index', target_db_engine, if_exists='replace', index=False)
training_hours.to_sql('Dim_training_hours', target_db_engine, if_exists='replace', index=False)
working_experience.to_sql('Dim_working_experience', target_db_engine, if_exists='replace', index=False)
enrollies_education.to_sql('Dim_enrollies_education', target_db_engine, if_exists='replace', index=False)
enrollies_data.to_sql('Dim_enrollies_data', target_db_engine , if_exists= 'replace', index=False)